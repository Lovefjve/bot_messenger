module.exports.config = {
    name: "top",
    version: "1.0.5",
    hasPermssion: 0,
    credits: "JRT",
    description: "Xem c√°c c·∫•p ƒë·ªô c·ªßa ng∆∞·ªùi d√πng",
    commandCategory: "Th·ªëng k√™",
    usages: "[thread/user/money/level]",
    cooldowns: 5
};

module.exports.run = async ({ event, api, args, Currencies, Users }) => {
    const { threadID, messageID } = event;
    if (args[1] && (isNaN(args[1]) || parseInt(args[1]) <= 0)) {
        return api.sendMessage("[üòΩ]‚ûú Th√¥ng tin ƒë·ªô d√†i list ph·∫£i l√† m·ªôt con s·ªë v√† kh√¥ng d∆∞·ªõi 0", threadID, messageID);
    }
    const option = parseInt(args[1]) || 10;
    const fs = require("fs-extra");
    const request = require("request");

    function expToLevel(point) {
        if (point < 0) return 0;
        return Math.floor((Math.sqrt(1 + (4 * point) / 3) + 1) / 2);
    }

    if (args[0] == "level") {
        let all = await Currencies.getAll(['userID', 'exp']);
        all.sort((a, b) => b.exp - a.exp);
        let msg = {
            body: '=== Top 15 ng∆∞·ªùi d√πng c√≥ level cao nh·∫•t server ===',
        };
        for (let i = 0; i < Math.min(15, all.length); i++) {
            let level = expToLevel(all[i].exp);
            let user = await Users.getData(all[i].userID);
            let name = user.name;
            msg.body += `\n${i + 1}. ${name} - c·∫•p ${level}`;
        }
        return api.sendMessage(msg, threadID, messageID);
    }

    if (args[0] == "thread") {
        try {
            let data = await api.getThreadList(option + 10, null, ["INBOX"]);
            let threadList = data.filter(thread => thread.isGroup).map(thread => ({
                threadName: thread.name,
                threadID: thread.threadID,
                messageCount: thread.messageCount
            }));

            threadList.sort((a, b) => b.messageCount - a.messageCount);

            let msg = "";
            for (let i = 0; i < Math.min(option, threadList.length); i++) {
                let thread = threadList[i];
                msg += `${i + 1}. ${(thread.threadName) || "Kh√¥ng t√™n"}\n[üíé]‚ûú TID: [${thread.threadID}]\n[üå∏]‚ûú S·ªë tin nh·∫Øn: ${thread.messageCount} tin nh·∫Øn\n\n`;
            }
            return api.sendMessage(`=== D∆∞·ªõi ƒë√¢y l√† top ${threadList.length} c√°c nh√≥m l·∫Øm m·ªìm nh·∫•t qu·∫£ ƒë·∫•t ===\n‚âª‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚ãÜ‚ú©‚ãÜ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚â∫\n${msg}\n‚âª‚îÄ‚îÄ‚îÄ‚îÄEND‚îÄ‚îÄ‚îÄ‚îÄ‚â∫`, threadID, messageID);
        } catch (e) {
            console.log(e);
        }
    }

    if (args[0] == "money") {
        let all = await Currencies.getAll(['userID', 'money']);
        all.sort((a, b) => b.money - a.money);
        let msg = {
            body: '=== Top 10 ng∆∞·ªùi d√πng gi√†u nh·∫•t server ===',
        };
        for (let i = 0; i < Math.min(10, all.length); i++) {
            let user = await Users.getData(all[i].userID);
            let name = user.name;
            msg.body += `\n${i + 1}. ${name}: ${all[i].money} ƒë√¥`;
        }
        return api.sendMessage(msg, threadID, messageID);
    }

    if (args[0] == "user") {
        try {
            let data = await Currencies.getAll(["userID", "exp"]);
            data.sort((a, b) => b.exp - a.exp);
            const idBot = api.getCurrentUserID();
            data = data.filter(item => item.userID != idBot);

            let msg = "";
            for (let i = 0; i < Math.min(option, data.length); i++) {
                let user = await Users.getData(data[i].userID);
                let name = user.name;
                msg += `${i + 1}/ ${name} v·ªõi ${data[i].exp} tin nh·∫Øn\n`;
            }
            return api.sendMessage(`=== D∆∞·ªõi ƒë√¢y l√† top ${option} c√°c ng∆∞·ªùi d√πng l·∫Øm m·ªìm nh·∫•t qu·∫£ ƒë·∫•t ===\n\n${msg}`, threadID, messageID);
        } catch (e) {
            console.log(e);
        }
    }
};
